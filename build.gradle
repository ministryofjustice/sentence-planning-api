plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'java'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.owasp.dependencycheck' version '5.3.2.1'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.13'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: 'jacoco'

group = 'uk.gov.justice.digital'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    agentDeps
    agentDeps.transitive = false
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination file("${buildDir}/reports/jacocoHtml")
    }
}

dependencyCheck {
    cveValidForHours=4
    suppressionFiles = ['dependency-check-suppress-spring.xml']
    format = 'ALL'
    analyzers {
        assemblyEnabled = false
    }
}

test.finalizedBy jacocoTestReport


def applicationName = 'sentence-planning-api'
def today = java.time.Instant.now()
def todayDate = java.time.LocalDate.now()
def formatter = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd")
version todayDate.format(formatter)

jar {
    baseName = applicationName
    manifest {
        attributes 'Implementation-Title': applicationName,
                'Implementation-Version': System.getenv('CI') ? "${version}.${System.getenv('CIRCLE_BUILD_NUM')}" : version
    }
}

springBoot {
    buildInfo {
        properties {
            artifact = rootProject.name
            version = System.getenv('CI') ? "${version}.${System.getenv('CIRCLE_BUILD_NUM')}" : version
            group = 'uk.gov.justice.digital'
            name = rootProject.name
            time = today
            additional = [
                    by                   : System.properties['user.name'],
                    operatingSystem      : "${System.properties['os.name']} (${System.properties['os.version']})",
                    continuousIntegration: System.getenv('CI') ? true : false,
                    machine              : InetAddress.localHost.hostName
            ]
        }
    }
}


repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.security.oauth:spring-security-oauth2:2.4.0.RELEASE'
    implementation 'org.springframework.data:spring-data-envers:2.2.6.RELEASE'
    implementation 'org.flywaydb:flyway-core'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    implementation 'com.github.ben-manes.caffeine:caffeine:2.8.1'
    implementation 'com.vladmihalcea:hibernate-types-52:2.9.7'
    implementation 'org.hibernate:hibernate-envers:5.4.14.Final'
    
    implementation 'net.logstash.logback:logstash-logback-encoder:6.3'
    implementation 'com.microsoft.azure:applicationinsights-spring-boot-starter:2.6.0'
    implementation 'com.microsoft.azure:applicationinsights-logging-logback:2.6.0'
    agentDeps 'com.microsoft.azure:applicationinsights-agent:2.6.0'
    implementation configurations.agentDeps

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    testImplementation 'io.rest-assured:rest-assured:3.3.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation('org.assertj:assertj-core')

    implementation ('com.google.guava:guava:28.2-jre') {
        because 'Transitive dependency. Previous versions have a known vulnerability'
    }
    implementation ('org.yaml:snakeyaml:1.26') {
        because 'Transitive dependency. Previous versions have a known vulnerability'
    }
}

task copyAgent(type: Copy) {
    from configurations.agentDeps
    into "$buildDir/libs"
}

assemble.dependsOn copyAgent